import React, { useMemo, useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Search, Bookmark, BookmarkCheck, Share2, Shuffle, Settings, Moon, Sun, Filter, Globe, BookOpen, Info } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// --- Types
type Hadith = {
  id: string;
  book: string; // e.g., "Bukhari"
  number: string; // e.g., "1"
  arabic?: string;
  french?: string;
  english?: string;
  grade?: string; // e.g., "Sahih"
  topic?: string;
  refs?: { collection?: string; book?: number; hadith?: number };
  narrators?: string[];
};

// --- Mock seed data (replace with API or DB)
const SEED: Hadith[] = [
  {
    id: "bukhari-1",
    book: "Bukhari",
    number: "1",
    topic: "Intention",
    grade: "Sahih",
    arabic:
      "إِنَّمَا الأَعْمَالُ بِالنِّيَّاتِ وَإِنَّمَا لِكُلِّ امْرِئٍ مَا نَوَى",
    english:
      "Actions are only by intentions, and every person will have only what they intended.",
    french:
      "Les actes ne valent que par les intentions et chacun n'aura que ce qu'il a eu l'intention de faire.",
    narrators: ["Umar ibn al-Khattab"],
    refs: { collection: "Sahih al-Bukhari", book: 1, hadith: 1 },
  },
  {
    id: "muslim-9",
    book: "Muslim",
    number: "9",
    topic: "Islam/Iman/Ihsan",
    grade: "Sahih",
    arabic:
      "الإِحْسَانُ أَنْ تَعْبُدَ اللَّهَ كَأَنَّكَ تَرَاهُ ...",
    english:
      "Excellence (Ihsan) is to worship Allah as though you see Him...",
    french:
      "L'excellence (Ihsân) consiste à adorer Allah comme si tu Le voyais...",
    narrators: ["Abu Hurayra"],
    refs: { collection: "Sahih Muslim", book: 1, hadith: 9 },
  },
  {
    id: "tirmidhi-2616",
    book: "Tirmidhi",
    number: "2616",
    topic: "Bon caractère",
    grade: "Hasan",
    arabic:
      "خَيْرُكُمْ خَيْرُكُمْ لِأَهْلِهِ وَأَنَا خَيْرُكُمْ لِأَهْلِي",
    english:
      "The best of you are those who are best to their families, and I am the best of you to my family.",
    french:
      "Les meilleurs d'entre vous sont ceux qui sont les meilleurs envers leur famille, et je suis le meilleur d'entre vous envers ma famille.",
    narrators: ["Aisha (ra)"],
    refs: { collection: "Jami' at-Tirmidhi", book: 46, hadith: 2616 },
  },
];

// --- Utility
function norm(s?: string) {
  return (s || "").toLowerCase().normalize("NFD").replace(/\p{Diacritic}/gu, "");
}

const BOOKS = ["Bukhari", "Muslim", "Tirmidhi"];
const GRADES = ["All", "Sahih", "Hasan", "Da'if"];

export default function HadithApp() {
  const [query, setQuery] = useState("");
  const [book, setBook] = useState<string>("All");
  const [grade, setGrade] = useState<string>("All");
  const [lang, setLang] = useState<"french" | "arabic" | "english">("french");
  const [bookmarks, setBookmarks] = useState<string[]>(() => {
    try {
      return JSON.parse(localStorage.getItem("hdj_bookmarks") || "[]");
    } catch {
      return [];
    }
  });
  const [dark, setDark] = useState<boolean>(() => {
    try {
      return JSON.parse(localStorage.getItem("hdj_dark") || "true");
    } catch {
      return true;
    }
  });

  useEffect(() => {
    document.documentElement.classList.toggle("dark", dark);
    localStorage.setItem("hdj_dark", JSON.stringify(dark));
  }, [dark]);

  useEffect(() => {
    localStorage.setItem("hdj_bookmarks", JSON.stringify(bookmarks));
  }, [bookmarks]);

  const data = useMemo(() => {
    return SEED.filter((h) => (book === "All" ? true : h.book === book))
      .filter((h) => (grade === "All" ? true : h.grade === grade))
      .filter((h) => {
        const q = norm(query);
        if (!q) return true;
        return (
          norm(h[lang])?.includes(q) ||
          norm(h.topic)?.includes(q) ||
          norm(h.arabic)?.includes(q) ||
          norm(h.english)?.includes(q) ||
          norm(h.french)?.includes(q) ||
          h.narrators?.some((n) => norm(n).includes(q))
        );
      });
  }, [query, book, grade, lang]);

  const [daily, setDaily] = useState<Hadith>(() => SEED[Math.floor(Math.random() * SEED.length)]);
  const pickRandom = () => setDaily(SEED[Math.floor(Math.random() * SEED.length)]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted/30 px-4 md:px-8 py-8 text-foreground transition-colors">
      {/* Header */}
      <div className="max-w-6xl mx-auto flex items-center justify-between gap-3 mb-6">
        <div className="flex items-center gap-3">
          <BookOpen className="h-7 w-7" />
          <div>
            <h1 className="text-2xl md:text-3xl font-semibold tracking-tight">Hadith — Rappels du jour</h1>
            <p className="text-sm text-muted-foreground">Recherche rapide, filtrage malin, design épuré.</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="ghost" className="gap-2" onClick={() => setDark((d) => !d)}>
            {dark ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            <span className="hidden sm:inline">Theme</span>
          </Button>
          <Select value={lang} onValueChange={(v) => setLang(v as any)}>
            <SelectTrigger className="w-[130px]">
              <Globe className="mr-2 h-4 w-4" />
              <SelectValue placeholder="Langue" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="french">Français</SelectItem>
              <SelectItem value="english">English</SelectItem>
              <SelectItem value="arabic">العربية</SelectItem>
            </SelectContent>
          </Select>
          <Button variant="outline" className="gap-2" onClick={pickRandom}>
            <Shuffle className="h-5 w-5" /> Aléatoire
          </Button>
        </div>
      </div>

      {/* Daily hadith */}
      <Card className="max-w-6xl mx-auto mb-8 shadow-md">
        <CardHeader className="flex flex-row items-start justify-between gap-2">
          <div>
            <CardTitle className="text-lg">Hadith du jour</CardTitle>
            <CardDescription className="text-xs">{daily.refs?.collection} · {daily.book} #{daily.number} · {daily.grade}</CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <Badge variant="secondary">{daily.topic}</Badge>
            <Info className="h-4 w-4 text-muted-foreground" />
          </div>
        </CardHeader>
        <CardContent>
          <p className={`leading-relaxed ${lang === "arabic" ? "text-xl md:text-2xl text-right" : "text-base md:text-lg"}`}>
            {daily[lang] || daily.english}
          </p>
          <p className="mt-2 text-sm text-muted-foreground">Narrateur(s) : {daily.narrators?.join(", ")}</p>
        </CardContent>
        <CardFooter className="flex items-center justify-end gap-2">
          <Button
            variant="ghost"
            className="gap-2"
            onClick={() => {
              if (bookmarks.includes(daily.id)) {
                setBookmarks(bookmarks.filter((b) => b !== daily.id));
              } else {
                setBookmarks([...bookmarks, daily.id]);
              }
            }}
          >
            {bookmarks.includes(daily.id) ? (
              <BookmarkCheck className="h-4 w-4" />
            ) : (
              <Bookmark className="h-4 w-4" />
            )}
            {bookmarks.includes(daily.id) ? "Enregistré" : "Enregistrer"}
          </Button>
          <Button
            variant="default"
            className="gap-2"
            onClick={() => {
              const text = `${daily.refs?.collection} ${daily.book} ${daily.number} — ${daily[lang] || daily.english}`;
              navigator.clipboard.writeText(text);
            }}
          >
            <Share2 className="h-4 w-4" /> Copier
          </Button>
        </CardFooter>
      </Card>

      {/* Search & filters */}
      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="md:col-span-3">
          <div className="flex items-center gap-2 mb-3">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="Rechercher un hadith, un thème, un narrateur..."
                className="pl-9"
              />
            </div>
            <Select value={book} onValueChange={setBook as any}>
              <SelectTrigger className="w-[150px]"><Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Recueil" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="All">Tous les recueils</SelectItem>
                {BOOKS.map((b) => (
                  <SelectItem key={b} value={b}>{b}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={grade} onValueChange={setGrade as any}>
              <SelectTrigger className="w-[150px]"><SelectValue placeholder="Authenticité" /></SelectTrigger>
              <SelectContent>
                {GRADES.map((g) => (
                  <SelectItem key={g} value={g}>{g}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Results */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <AnimatePresence>
              {data.map((h) => (
                <motion.div key={h.id} initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -8 }}>
                  <Card className="h-full">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-base">{h.refs?.collection} · {h.book} #{h.number}</CardTitle>
                        <Badge variant="secondary">{h.grade}</Badge>
                      </div>
                      <CardDescription className="text-xs">{h.topic}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <p className={`${lang === "arabic" ? "text-right" : ""}`}>{h[lang] || h.english}</p>
                    </CardContent>
                    <CardFooter className="flex items-center justify-between">
                      <div className="text-xs text-muted-foreground">{h.narrators?.join(", ")}</div>
                      <Button
                        size="sm"
                        variant={bookmarks.includes(h.id) ? "secondary" : "outline"}
                        className="gap-2"
                        onClick={() => {
                          setBookmarks((bm) =>
                            bm.includes(h.id) ? bm.filter((x) => x !== h.id) : [...bm, h.id]
                          );
                        }}
                      >
                        {bookmarks.includes(h.id) ? <BookmarkCheck className="h-4 w-4" /> : <Bookmark className="h-4 w-4" />} Sauvegarder
                      </Button>
                    </CardFooter>
                  </Card>
                </motion.div>
              ))}
            </AnimatePresence>
          </div>
        </div>

        {/* Sidebar bookmarks & settings */}
        <div className="md:col-span-1 space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2"><Bookmark className="h-4 w-4" /> Favoris</CardTitle>
              <CardDescription className="text-xs">Retrouve tes rappels préférés.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {bookmarks.length === 0 && <p className="text-sm text-muted-foreground">Aucun favori pour l'instant.</p>}
              {bookmarks.length > 0 && (
                <ul className="space-y-2 text-sm">
                  {bookmarks.map((id) => {
                    const h = SEED.find((x) => x.id === id);
                    if (!h) return null;
                    return (
                      <li key={id} className="flex items-start justify-between gap-2 border-b pb-2">
                        <div>
                          <div className="font-medium">{h.refs?.collection} · {h.book} #{h.number}</div>
                          <div className="text-xs text-muted-foreground line-clamp-2">{h.french || h.english}</div>
                        </div>
                        <Button size="icon" variant="ghost" onClick={() => setDaily(h)}><BookOpen className="h-4 w-4" /></Button>
                      </li>
                    );
                  })}
                </ul>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-base flex items-center gap-2"><Settings className="h-4 w-4" /> Réglages</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 text-sm">
              <div className="flex items-center justify-between">
                <span>Mode sombre</span>
                <Switch checked={dark} onCheckedChange={setDark} />
              </div>
              <div>
                <div className="text-xs text-muted-foreground mb-1">Langue d'affichage</div>
                <Tabs value={lang} onValueChange={(v) => setLang(v as any)}>
                  <TabsList className="grid grid-cols-3 w-full">
                    <TabsTrigger value="french">FR</TabsTrigger>
                    <TabsTrigger value="english">EN</TabsTrigger>
                    <TabsTrigger value="arabic">AR</TabsTrigger>
                  </TabsList>
                </Tabs>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Footer */}
      <div className="max-w-6xl mx-auto mt-10 text-center text-xs text-muted-foreground">
        <p>
          Données d'exemple. Pour la production, branche ce front à une base authentifiée (API officielle
          ou dataset open‑source) et affiche les sources et les degrés d'authenticité.
        </p>
      </div>
    </div>
  );
}
